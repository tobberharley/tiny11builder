name: Build tiny11 ISO (bootable, auto-index)

on:
  workflow_dispatch:
    inputs:
      iso_url:
        description: "Direct download URL to official Windows 11 ISO (x64 or ARM64)"
        required: true
      edition_order:
        description: "Comma-separated preference (matches Name): Pro,Professional,Enterprise,Education,Home"
        required: false
        default: "Pro,Professional,Enterprise,Education,Home"

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Checkout tiny11builder
        uses: actions/checkout@v4
        with:
          repository: tobberharley/tiny11builder
          ref: main
          path: tiny11builder

      - name: Download Windows ISO
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $isoUrl = '${{ github.event.inputs.iso_url }}'
          $out = Join-Path $PWD 'win11.iso'
          Invoke-WebRequest -Uri $isoUrl -OutFile $out
          Write-Host "Downloaded to: $out"

      - name: Mount ISO
        id: mount_iso
        shell: pwsh
        run: |
          $isoPath = Join-Path $PWD 'win11.iso'
          $di = Mount-DiskImage -ImagePath $isoPath -StorageType ISO -PassThru
          Start-Sleep -Seconds 3
          $vol = (Get-DiskImage -ImagePath $isoPath | Get-Volume | Where-Object DriveLetter).DriveLetter
          if (-not $vol) { throw 'Failed to get mounted ISO drive letter.' }
          "ISO_DRIVE=$vol" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding ascii -Append
          Write-Host "ISO mounted at $vol:"

      - name: Detect edition index
        id: detect_index
        shell: pwsh
        env:
          ISO_DRV: ${{ steps.mount_iso.outputs.ISO_DRIVE }}
          EDITION_ORDER: ${{ github.event.inputs.edition_order }}
        run: |
          $iso = "$env:ISO_DRV`:"
          $wim = Join-Path $iso 'sources\install.wim'
          $esd = Join-Path $iso 'sources\install.esd'
          $imageFile = if (Test-Path $wim) { $wim } elseif (Test-Path $esd) { $esd } else { throw "No install.wim/esd found in $iso\sources" }
          $lines = & dism /English /Get-WimInfo /Wi
